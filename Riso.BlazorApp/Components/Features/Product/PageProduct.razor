@page "/product"
@inject AppDbContext db

<PageTitle>Product List</PageTitle>

<h3>Product List</h3>

<div class="mb-3">
	<label class="form-label">Product Name</label>
	<input type="text" class="form-control" @bind="request.ProductName" placeholder="Enter product name" />
</div>

<div class="mb-3">
	<label class="form-label">Price</label>
	<input type="number" step="0.01" class="form-control" @bind="request.Price" placeholder="Enter price" />
</div>

<div class="mb-3">
	<label class="form-label">Quantity</label>
	<input type="number" class="form-control" @bind="request.Quantity" placeholder="Enter quantity" />
</div>

<button type="button" class="btn btn-outline-success" @onclick="Generate">Generate</button>
<button type="button" class="btn btn-outline-primary" @onclick="Reload">Reload</button>
<button type="button" class="btn btn-success" @onclick="Save">Save</button>

<table class="table table-bordered">
	<thead>
		<tr>
			<th>No.</th>
			<th>Product Name</th>
			<th>Price</th>
			<th>Quantity</th>
		</tr>
	</thead>
	<tbody>
		@{
			int count = (pageNo - 1) * pageSize;
			foreach (var item in lst)
			{
				<tr>
					<td>@(++count)</td>
					<td>@item.ProductName</td>
					<td>@item.Price</td>
					<td>@item.Quantity</td>
				</tr>
			}
		}
	</tbody>
</table>
<nav aria-label="Page navigation example">
	<ul class="pagination">
		@* <li class="page-item">
			<a class="page-link" href="#" aria-label="Previous">
				<span aria-hidden="true">&laquo;</span>
			</a>
		</li> *@
		@for (int i = 1; i <= pageCount; i++)
		{
			int currentPageNo = i;
			string active = i == pageNo ? "active" : "";
			<li class="page-item @active">
				<button class="page-link" type="button" @onclick="() => GoTo(currentPageNo)">@(i)</button>
			</li>
			@* if (i == pageNo)
			{
				<li class="page-item active">
					<button class="page-link" type="button" @onclick="() => GoTo(currentPageNo)">@(i)</button>

				</li>
			}
			else
			{
				<li class="page-item">
					<button class="page-link" type="button" @onclick="() => GoTo(currentPageNo)">@(i)</button>
				</li>
			} *@
		}
		@* <li class="page-item"><a class="page-link" href="#">1</a></li>
		<li class="page-item"><a class="page-link" href="#">2</a></li>
		<li class="page-item"><a class="page-link" href="#">3</a></li> *@
		@* <li class="page-item">
			<a class="page-link" href="#" aria-label="Next">
				<span aria-hidden="true">&raquo;</span>
			</a>
		</li> *@
	</ul>
</nav>

@code {
	private int pageNo = 1;
	private int pageSize = 10;
	private int pageCount = 0;
	private List<TblProduct> lst = new List<TblProduct>();
	private TblProduct request = new TblProduct();

	protected override async Task OnInitializedAsync()
	{
		await Reload();
	}

	private async Task Reload()
	{
		var query = db.TblProducts
			.OrderByDescending(x => x.ProductId)
			.Where(x => x.IsDelete == false);
		var count = await query.CountAsync(); // 59
		pageCount = count / pageSize; // 59 / 10 = 5
		if (count % pageSize > 0)
		{
			pageCount++;
		}

		lst = await query
			.Skip((pageNo - 1) * pageSize)
			.Take(pageSize)
			.ToListAsync();
	}

	private async Task GoTo(int currentPageNo) // click pageno
	{
		pageNo = currentPageNo;
		await Reload();
	}

	private async Task Generate()
	{
		for (int i = 0; i < 9; i++)
		{
			db.TblProducts.Add(new TblProduct
			{
				CreatedBy = "System",
				CreatedDate = DateTime.Now,
				IsDelete = false,
				Price = 1980 * (i + 1),
				ProductName = $"Product {i + 1}",
				Quantity = 78 * (i + 1)
			});
		}
		await db.SaveChangesAsync();
	}

	private async Task Save()
	{
		request.CreatedBy = "System";
		request.CreatedDate = DateTime.Now;
		request.IsDelete = false;
		db.TblProducts.Add(request);
		await db.SaveChangesAsync();

		request = new TblProduct();
		await Reload();
	}
}
